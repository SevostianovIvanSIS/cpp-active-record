= Getting started

== Tables and Models

- Create a class representing a table:
  class Foo: public ActiveRecord::Base< Foo > {
  };

- Define constructors:
  ...
  public:
   AR_CONSTRUCTORS( File )
  ...

- Define table() method describing the table:
  ...
  public:
    static void table( Connection * connection ) {
      Table td( connection, "foos" );
      td.fields() = fields
                    ( "bar", ActiveRecord::text )
                    ( "baz", ActiveRecord::integer );
      td.timestamps( true );
      return td;
    }
  ...

- Tell the Model its own Name

template <>
string ActiveRecord::Base< Foo >::class_name = "Foo";

== Connect

  ActiveRecord::Connection connection;
  connection.connect( options
    ( "adapter", "sqlite" )
    ( "database", "foo.sqlite3" ) );
  Foo::setup( &connection );

== Insert Data

  Foo foo;
  foo[ "bar" ] = "Hi";
  foo[ "baz" ] = 42;
  foo.save();

== Retrieve Data

- By id:
  Foo foo( 1 );
  cout << "Foo 1's bar: " << foo.text( "bar" ) << endl;

- Via a query:
  vector< Foo > foos = ActiveRecord::Query< Foo >()
    .where( "bar = ?", "Hi" )
    .where( "baz > ?", 41 )
    .order( "bar" )
    .limit( 5 )
    .all();
